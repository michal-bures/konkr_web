{"version":3,"sources":["components/AppHeader.js","model/LineFinder.js","model/Board.js","components/PlayerSymbol.js","components/Cell.js","model/GameState.js","components/GameGrid.js","components/GameStateMessage.js","config.js","App.js","serviceWorker.js","index.js"],"names":["AppHeader","_ref","gameState","onNewGameClicked","react_default","a","createElement","className","winCondition","onClick","directions","LineFinder","Object","classCallCheck","this","createClass","key","value","board","x","y","requiredLength","Board","isCellEmpty","symbol","getSymbolAt","map","direction","start","getLineStart","_ref2","nextCell","isCellValid","getLongestLineFrom","_ref3","concat","opposite","find","line","length","create","width","height","cells","Array","fill","Error","throwInvalidCoordinatesError","clear","placeSymbol","newBoard","objectSpread","toConsumableArray","findStraightLine","PlayerSymbol","player","style","color","Cell","owner","highlighted","clickable","classes","push","join","getClassNames","components_PlayerSymbol","GameState","config","players","currentPlayerIndex","winner","undefined","winningLine","state","getPlayerBySymbol","candidateX","candidateY","isGameOver","some","currentPlayer","getCurrentPlayer","nextPlayerIndex","GameGrid","_Component","_getPrototypeOf2","_this","_len","arguments","args","_key","possibleConstructorReturn","getPrototypeOf","call","apply","render","props","rows","keys","borderColor","row","renderRow","columns","column","renderCell","symbolOwner","src_components_Cell","isCellOnWinningLine","onCellSelected","inherits","Component","GameStateMessage","GAME_CONFIG","getInitialGameState","startNewGame","App","isValidPlay","console","info","setState","makePlay","src_components_AppHeader","GameGrid_GameGrid","src_components_GameStateMessage","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19d5b327.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./AppHeader.css\";\r\n\r\nconst AppHeader = ({ gameState, onNewGameClicked }) => {\r\n    return (\r\n        <header className=\"AppHeader navbar navbar-expand-lg navbar-dark bg-dark\">\r\n            <div className=\"navbar-brand\">Match {gameState.winCondition}!</div>\r\n            <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                    <button className=\"btn btn-primary\" onClick={onNewGameClicked}>\r\n                        NEW GAME\r\n                    </button>\r\n                </li>\r\n            </ul>\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default AppHeader;\r\n","import { Board } from \"./Board\";\r\n\r\nconst directions = [[0, 1], [1, 1], [1, 0], [-1, 1]];\r\n\r\nexport class LineFinder {\r\n    static findStraightLine({ board, x, y, requiredLength }) {\r\n        if (Board.isCellEmpty(board, x, y)) return undefined;\r\n        const symbol = Board.getSymbolAt(board, x, y);\r\n\r\n        const lines = directions.map(direction => {\r\n            const start = getLineStart({ board, x, y, symbol, direction });\r\n            return getLongestLineFrom({\r\n                board,\r\n                x: start.x,\r\n                y: start.y,\r\n                symbol,\r\n                direction: opposite(direction)\r\n            });\r\n        });\r\n\r\n        return lines.find(line => line.length >= requiredLength);\r\n\r\n        function opposite(direction) {\r\n            return [-direction[0], -direction[1]];\r\n        }\r\n\r\n        function getLineStart({ board, x, y, symbol, direction }) {\r\n            const nextCell = { x: x + direction[0], y: y + direction[1] };\r\n            if (\r\n                !Board.isCellValid(board, nextCell.x, nextCell.y) ||\r\n                Board.getSymbolAt(board, nextCell.x, nextCell.y) !== symbol\r\n            )\r\n                return { x, y };\r\n            return getLineStart({ board, x: nextCell.x, y: nextCell.y, symbol, direction });\r\n        }\r\n\r\n        function getLongestLineFrom({ board, x, y, symbol, direction }) {\r\n            if (!Board.isCellValid(board, x, y) || !isCorrectSymbol()) return [];\r\n\r\n            return [{ x, y }].concat(\r\n                getLongestLineFrom({\r\n                    board,\r\n                    x: x + direction[0],\r\n                    y: y + direction[1],\r\n                    symbol,\r\n                    direction\r\n                })\r\n            );\r\n\r\n            function isCorrectSymbol() {\r\n                return Board.getSymbolAt(board, x, y) === symbol;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LineFinder } from \"./LineFinder\";\r\n\r\nfunction clear(board) {\r\n    return create(board.width, board.height);\r\n}\r\n\r\nfunction create(width, height) {\r\n    return {\r\n        width,\r\n        height,\r\n        cells: new Array(width * height).fill(null)\r\n    };\r\n}\r\n\r\nfunction placeSymbol(board, x, y, symbol) {\r\n    if (!isCellEmpty(board, x, y)) {\r\n        throw new Error(\r\n            `Cannot place \"${symbol}\" into cell (${x},${y}), ` +\r\n                `it already contains \"${this.getSymbolAt(board, x, y)}\"`\r\n        );\r\n    }\r\n    const newBoard = { ...board };\r\n    newBoard.cells = [...newBoard.cells];\r\n    newBoard.cells[x * board.width + y] = symbol;\r\n    return newBoard;\r\n}\r\n\r\nfunction getSymbolAt(board, x, y) {\r\n    if (!isCellValid(board, x, y)) {\r\n        throwInvalidCoordinatesError(board, x, y);\r\n    }\r\n    return board.cells[x * board.width + y];\r\n}\r\n\r\nfunction isCellValid(board, x, y) {\r\n    return x < board.width && x >= 0 && y < board.height && y >= 0;\r\n}\r\n\r\nfunction isCellEmpty(board, x, y) {\r\n    return getSymbolAt(board, x, y) === null;\r\n}\r\n\r\nfunction throwInvalidCoordinatesError(board, x, y) {\r\n    throw new Error(\r\n        `tried to access invalid cell (${x},${y}); expected coordinates from (0,0) ` +\r\n            `to (${board.width}, ${board.height})`\r\n    );\r\n}\r\n\r\nfunction findStraightLine({ board, x, y, requiredLength }) {\r\n    return LineFinder.findStraightLine({ board, x, y, requiredLength });\r\n}\r\n\r\nexport const Board = {\r\n    clear,\r\n    create,\r\n    placeSymbol,\r\n    getSymbolAt,\r\n    isCellValid,\r\n    isCellEmpty,\r\n    findStraightLine\r\n};\r\n","import React from \"react\";\r\n\r\nconst PlayerSymbol = ({ player }) => {\r\n    return <span style={{ color: player.color }}>{player.symbol}</span>;\r\n};\r\n\r\nexport default PlayerSymbol;\r\n","import React from \"react\";\r\nimport \"./Cell.css\";\r\nimport PlayerSymbol from \"./PlayerSymbol\";\r\n\r\nconst Cell = ({ owner, highlighted, onClick, clickable }) => {\r\n    return (\r\n        <td className={getClassNames()} onClick={onClick}>\r\n            {renderPlayerSymbol()}\r\n        </td>\r\n    );\r\n\r\n    function renderPlayerSymbol() {\r\n        if (owner) {\r\n            return <PlayerSymbol player={owner} />;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function getClassNames() {\r\n        const classes = [];\r\n        classes.push(clickable ? \"clickable\" : \"not-clickable\");\r\n        if (highlighted) classes.push(\"highlighted\");\r\n\r\n        return classes.join(\" \");\r\n    }\r\n};\r\n\r\nexport default Cell;\r\n","import { Board } from \"./Board\";\r\n\r\nexport class GameState {\r\n    static startNewGame(config) {\r\n        return {\r\n            board: Board.create(config.width, config.height),\r\n            players: config.players,\r\n            currentPlayerIndex: 0,\r\n            winner: undefined,\r\n            winningLine: undefined,\r\n            winCondition: config.winCondition\r\n        };\r\n    }\r\n\r\n    static getColorOfSymbol(state, symbol) {\r\n        const player = this.getPlayerBySymbol(state, symbol);\r\n        if (player) return player.color;\r\n        return \"black\";\r\n    }\r\n\r\n    static getPlayerBySymbol(state, symbol) {\r\n        return state.players.find(player => player.symbol === symbol);\r\n    }\r\n\r\n    static getCurrentPlayer(state) {\r\n        return state.players[state.currentPlayerIndex];\r\n    }\r\n\r\n    static isValidPlay(state, x, y) {\r\n        return Board.isCellEmpty(state.board, x, y);\r\n    }\r\n\r\n    static isGameOver(state) {\r\n        return state.winner !== undefined;\r\n    }\r\n\r\n    static isCellOnWinningLine(state, candidateX, candidateY) {\r\n        if (!this.isGameOver(state)) return false;\r\n        return state.winningLine.some(({ x, y }) => candidateX === x && candidateY === y);\r\n    }\r\n\r\n    static makePlay(state, x, y) {\r\n        if (this.isGameOver(state)) {\r\n            throw new Error(`Cannot make play at ${x}:${y}, the game is over!`);\r\n        }\r\n        let currentPlayer = this.getCurrentPlayer(state);\r\n        const newBoard = Board.placeSymbol(state.board, x, y, this.getCurrentPlayer(state).symbol);\r\n        let winner = undefined;\r\n        let currentPlayerIndex = state.currentPlayerIndex;\r\n        const winningLine = Board.findStraightLine({\r\n            board: newBoard,\r\n            x,\r\n            y,\r\n            requiredLength: state.winCondition\r\n        });\r\n        if (winningLine) {\r\n            winner = currentPlayer;\r\n        } else {\r\n            currentPlayerIndex = nextPlayerIndex(state);\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            board: newBoard,\r\n            currentPlayerIndex,\r\n            winner,\r\n            winningLine\r\n        };\r\n\r\n        function nextPlayerIndex(state) {\r\n            if (GameState.isGameOver(state)) return state.currentPlayerIndex;\r\n            return (state.currentPlayerIndex + 1) % state.players.length;\r\n        }\r\n    }\r\n}\r\n","import { Board } from \"../model/Board\";\r\nimport Cell from \"./Cell\";\r\nimport { GameState } from \"../model/GameState\";\r\nimport React, { Component } from \"react\";\r\nimport \"./GameGrid.css\";\r\n\r\nexport class GameGrid extends Component {\r\n    render = () => {\r\n        const gameState = this.props.gameState;\r\n        const rows = [...Array(gameState.board.height).keys()];\r\n        return (\r\n            <div\r\n                className=\"GameGrid\"\r\n                style={{ borderColor: GameState.getCurrentPlayer(gameState).color }}\r\n            >\r\n                <table>\r\n                    <tbody>{rows.map(row => this.renderRow(row))}</tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    };\r\n    renderRow = row => {\r\n        const board = this.props.gameState.board;\r\n        const columns = [...Array(board.width).keys()];\r\n        return <tr key={row}>{columns.map(column => this.renderCell(row, column))}</tr>;\r\n    };\r\n    renderCell = (row, column) => {\r\n        const gameState = this.props.gameState;\r\n        const symbol = Board.getSymbolAt(gameState.board, column, row);\r\n        const symbolOwner = GameState.getPlayerBySymbol(gameState, symbol);\r\n\r\n        return (\r\n            <Cell\r\n                key={column}\r\n                owner={symbolOwner}\r\n                clickable={\r\n                    Board.isCellEmpty(gameState.board, column, row) &&\r\n                    !GameState.isGameOver(gameState)\r\n                }\r\n                highlighted={GameState.isCellOnWinningLine(gameState, column, row)}\r\n                onClick={() => this.props.onCellSelected(column, row)}\r\n            />\r\n        );\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport \"./GameStateMessage.css\";\r\nimport { GameState } from \"../model/GameState\";\r\nimport PlayerSymbol from \"./PlayerSymbol\";\r\n\r\nconst GameStateMessage = ({ gameState }) => {\r\n    return (\r\n        <div className=\"GameStateMessage card\">\r\n            <div className=\"card-body\">{renderMessage()}</div>\r\n        </div>\r\n    );\r\n\r\n    function renderMessage() {\r\n        if (GameState.isGameOver(gameState)) {\r\n            return (\r\n                <span>\r\n                    Game Over! The winner is <PlayerSymbol player={gameState.winner} />\r\n                </span>\r\n            );\r\n        } else {\r\n            return (\r\n                <span>\r\n                    Place <PlayerSymbol player={GameState.getCurrentPlayer(gameState)} />!\r\n                </span>\r\n            );\r\n        }\r\n    }\r\n};\r\n\r\nexport default GameStateMessage;\r\n","export const GAME_CONFIG = {\r\n    width: 20,\r\n    height: 20,\r\n    players: [{ symbol: \"╳\", color: \"blue\" }, { symbol: \"◯\", color: \"red\" }],\r\n    winCondition: 5\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AppHeader from \"./components/AppHeader\";\nimport { GameGrid } from \"./components/GameGrid\";\nimport { GameState } from \"./model/GameState\";\nimport GameStateMessage from \"./components/GameStateMessage\";\nimport { GAME_CONFIG } from \"./config\";\n\nfunction getInitialGameState() {\n    return GameState.startNewGame(GAME_CONFIG);\n}\n\nclass App extends Component {\n    state = getInitialGameState();\n\n    render() {\n        return (\n            <div className=\"App\">\n                <AppHeader gameState={this.state} onNewGameClicked={this.startNewGame} />\n                <GameGrid gameState={this.state} onCellSelected={this.onCellSelected} />\n                <GameStateMessage gameState={this.state} />\n            </div>\n        );\n    }\n\n    onCellSelected = (x, y) => {\n        if (!GameState.isGameOver(this.state) && GameState.isValidPlay(this.state, x, y)) {\n            console.info(\n                `Player ${GameState.getCurrentPlayer(this.state).symbol} making play at (${x},${y})`\n            );\n            this.setState(GameState.makePlay(this.state, x, y));\n        }\n    };\n\n    startNewGame = () => {\n        this.setState(getInitialGameState());\n    };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}